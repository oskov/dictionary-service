// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xTTW/bPAz+KwLf92jE2dfFtw4FhtyGbkAPRQ+qTScsbEmj6GxB4P8+UHKceEmHXRLL",
	"pB4+H/QRat8H79BJhOoIsd5hb9PjF5RHz80DxqETfRHYB2QhTOUGW3Ik5F06kmCfHv5nbKGC/8ozcDmh",
	"lgvI+xkAxgLkEBAqsMz2oOefnps8JtZMIbVV8H2HRivmBcltDaMw4R6bFcwIUZjcFsaxAMYfAzE2UD1l",
	"vGLB+nm+419esRYd+xbDv8i/zfJcN741MvG+wbMA/GX70OHSxquupUF/qLtgc4F3LVDvkWt9mkDSae2e",
	"ar1o+WC+Ie+pRnP3dQMF7JFjFvRutV6tlYQP6GwgqOBDelVAsLJLhEvVVx71d9TzFuXamYcpMNOgWOqi",
	"sa65sCqa1rOxZkt7dLNharvV8qaB6pTQY84zWLY9CnKE6unNbRE/r8o8ufWs4KSNKgIKcLZXQ6ZVOfsr",
	"PGAxfRo3shmftTkG72IO8f16rX+1d4IuuWBD6KhOIsrXmHfmjPfPn0wOcCnyzsShrjHGdujMiYZm9TGz",
	"WHZ/to1RYRjTun869xCfejZOkJ3tTETeIxtk9pxWLg59b/mQU8jWTnYqs/F3AAAA//+F0uAXTQQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
