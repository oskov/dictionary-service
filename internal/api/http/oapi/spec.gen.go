// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xSTW/bMAz9KwK3oxFnW0++dSgw9DZ0A3YYdlAlOmFhSxpFpwiC/PeBkmsv61r0klji",
	"w+P70AlcHFMMGCRDd4Ls9jja8vkF5Udkf4d5GkQvEseELIRlfIM9BRKKoRxJcCwf7xl76OBduxK3M2t7",
	"QbkSwLkBOSaEDiyzPepZcUrnMTumVGAdfN+jeYzszT1S2BlGYcID+g0sDFmYwg7OK2e8f0AnSvrS/lfM",
	"/V+DX+Ym9kZmVW9SoVcU+qjEQjLo7Iacclk+mm/IB3Jorr/eQgMH5Fy3fthsN1v1EBMGmwg6+FSuGkhW",
	"9kV1qyLak/6e9bxDeS7/bs7MeBRLQzY2+L/8ZNNHNtbs6IBhcaXZWB3feuieYiwV6Xq2Iwpyhu7ni4VJ",
	"XNpaNveRlZwUqCaggWBHDeSxUjP+nojRQyc8YTO/zpLcPzH/UnBOMeRa4MftVv9cDIKhpGBTGsgVE+1D",
	"rsWufG9+tbXAS5PXJk/OYc79NJgnGdrVVVVxif5svVFjmKVirp5jdJ8JUUwfp+DLM8rTOFo+1vhrpnOO",
	"Kun8JwAA//8GYk/nyQMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
